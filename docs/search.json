[
  {
    "objectID": "examples/00_overview.html",
    "href": "examples/00_overview.html",
    "title": "1  Overview",
    "section": "",
    "text": "1.1 Tooltips\nBy default, cellestial produces HTML plots with geoms reveal tooltips when hovering.\nplot = cl.dimensional(\n    data,\n    dimensions=\"umap\",\n    key=\"leiden\",\n    size=0.6,\n    axis_type=\"arrow\",\n    legend_ondata=False,\n)\nplot\ndimensional plot produces dimensionalilty reduction plots by taking dimensions argument. Yet, the subset of plots pca, umap and tsne are also available.\nAlso, the expression plot is also a subset of dimensional plot but it only works with genes.",
    "crumbs": [
      "Introduction",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Overview</span>"
    ]
  },
  {
    "objectID": "examples/00_overview.html#zooming-and-paning",
    "href": "examples/00_overview.html#zooming-and-paning",
    "title": "1  Overview",
    "section": "1.2 Zooming and Paning",
    "text": "1.2 Zooming and Paning\nThere are also zoomable and panable if specified.\n\nplot = cl.dimensional(\n    data,\n    dimensions=\"umap\",\n    key=\"leiden\",\n    size=0.6,\n    interactive=True,\n    axis_type=\"arrow\",\n)\nplot\n\n   \n   \n\n\nNote that this functionality can be added via + ggtb() layer of lets_plot.",
    "crumbs": [
      "Introduction",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Overview</span>"
    ]
  },
  {
    "objectID": "examples/00_overview.html#high-customizability",
    "href": "examples/00_overview.html#high-customizability",
    "title": "1  Overview",
    "section": "1.3 High Customizability",
    "text": "1.3 High Customizability\nCellestial uses Lets-Plot, a ggplot2 impelementation in Pyton. As such, it allows adding or changing layers. Including color palettes, titles, labels, size etc., .\nHere an example with switching color palette to hue which is also the ggplot2 and Seurat defaults. Also, other theme() based customizations are given as examples.\n\ngggrid(\n    [\n        plot + scale_color_hue() + labs(title=\"Change color palette\"),\n        plot\n        + theme(legend_text=element_text(size=15))\n        + labs(title=\"Change legend text size\"),\n    ],\n    ncol=2,\n) + ggsize(1000, 400)\n\n   \n   \n\n\nIndeed, you can modify the size.\n\nplot += ggsize(500, 400)\nplot",
    "crumbs": [
      "Introduction",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Overview</span>"
    ]
  },
  {
    "objectID": "examples/00_overview.html#versatile",
    "href": "examples/00_overview.html#versatile",
    "title": "1  Overview",
    "section": "1.4 Versatile",
    "text": "1.4 Versatile\nCellestial offers many plotting functions to create publication-quality figures.\nSuch as violinplots, boxplots, scatter plots, and more.\n\nplot = (\n    cl.boxplot(\n        mini,\n        \"pct_counts_in_top_50_genes\",\n        fill=\"leiden\",\n        boxplot_color=\"#3f3f3f\",\n        show_points=True,\n        outlier_shape=1,\n    )\n    + ggsize(1000, 400)\n    + scale_y_log2()\n    + scale_fill_brewer(palette=\"Set2\")\n)\nplot",
    "crumbs": [
      "Introduction",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Overview</span>"
    ]
  },
  {
    "objectID": "examples/00_overview.html#multi-plots",
    "href": "examples/00_overview.html#multi-plots",
    "title": "1  Overview",
    "section": "1.5 Multi-Plots",
    "text": "1.5 Multi-Plots\nMulti-plots uses dimensional plot and grids list of keys given.\nWhile single-plot functions which generate a single-plot object, Multi-plot functions have plural names which provides predictable behaviors.\nSo, pca becomes pcas, umap becomes umaps, tsne becomes tsnes etc., for multi-plots.\n\numap_grid = (\n    cl.umaps(\n        data,\n        keys=[\"leiden\", \"HBD\", \"NEAT1\", \"IGKC\"],\n        ncol=2,\n        size=0.6,\n        color_high=\"#D2042D\",  # works with hex codes, rgb codes, and names (red, blue, etc.)\n    )\n    + ggsize(900, 700)\n)\numap_grid\n\n   \n   \n\n\nor with violins\n\ncl.violins(\n    mini,\n    [\n        \"n_genes_by_counts\",\n        \"pct_counts_in_top_100_genes\",\n        \"log1p_total_counts_mt\",\n        \"pct_counts_hb\",\n    ],\n    ncol=2,\n    fill=\"sample\",\n    show_points=True,\n    layers=[scale_y_log10()],\n)\n\n   \n   \n\n\n\ncl.versions()\n\ncellestial: 0.6.0\nscanpy: 1.10.4\nanndata: 0.11.3\npolars: 1.12.0",
    "crumbs": [
      "Introduction",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Overview</span>"
    ]
  },
  {
    "objectID": "examples/basic/01_scatter.html",
    "href": "examples/basic/01_scatter.html",
    "title": "2  scatter",
    "section": "",
    "text": "2.1 A simple scatter plot\nA scatter plot is a type of plot that displays the relationship between two quantitative variables. The scatter plot is useful for visualizing the relationship between two continuous variables.\nplot = (\n    cl.scatter(\n        data,\n        x=\"pct_counts_mt\",\n        y=\"total_counts_ribo\",\n        aes_color=\"n_genes_by_counts\",\n        size=3,\n    )\n    + scale_y_log10()\n    + ggsize(600, 400)\n)\n\nplot",
    "crumbs": [
      "Basic",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>scatter</span>"
    ]
  },
  {
    "objectID": "examples/basic/01_scatter.html#customizations",
    "href": "examples/basic/01_scatter.html#customizations",
    "title": "2  scatter",
    "section": "2.2 Customizations",
    "text": "2.2 Customizations\nAdd any layer you desire, from color palettes to size of the plot to theme components.\nFor example, you can simply modify or ‘ovewrite’ the color palette.\n\nplot + scale_color_continuous(low=\"blue\", high=\"red\")\n\n   \n   \n\n\nor make the plot interactive. note that it is also possible to make it zoomable and panable by setting the interactive argument to True when calling the function.\n\nplot + ggtb()\n# you can use the buttons from the toolbar to zoom in and out or move around the plot\n\n   \n   \n\n\nand of course you can modify the theme componenents of the plot.\n\nplot = (\n    plot\n    + labs(x=\"PCM\", y=\"TCR\", title=\"TCR vs PCM\")  # modify labels\n    + theme(\n        axis_title=element_text(size=18, color=\"#6f6f6f\"),  # modify axis titles\n        title=element_text(\n            family=\"monospace\", size=20, color=\"#3f3f3f\", face=\"bold\"\n        ),  # modify title elements\n        axis_line=element_blank(),  # remove axis lines\n        axis_ticks=element_blank(),  # remove axis ticks\n        axis_text=element_text(size=16, face=\"italic\"),  # remove axis text\n        legend_position=\"bottom\",  # move legend to bottom\n    )\n    + ggsize(700, 600)\n    + ggtb()\n)\nplot\n\n   \n   \n\n\n\ncl.versions()\n\ncellestial: 0.2.0\nscanpy: 1.10.4\nanndata: 0.11.0\npolars: 1.12.0",
    "crumbs": [
      "Basic",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>scatter</span>"
    ]
  },
  {
    "objectID": "examples/dimensional/01_umap.html",
    "href": "examples/dimensional/01_umap.html",
    "title": "3  umap",
    "section": "",
    "text": "3.0.1 A simple umap plot\nplot = cl.umap(\n    data,\n    key=\"leiden\",\n    axis_type=\"arrow\",\n    size=0.6,\n    interactive=True,\n    add_tooltips=[\"sample\"],\n)\nplot",
    "crumbs": [
      "Dimensional Reduction",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>umap</span>"
    ]
  },
  {
    "objectID": "examples/dimensional/01_umap.html#of-course-it-is-possible-to-customize-the-plot",
    "href": "examples/dimensional/01_umap.html#of-course-it-is-possible-to-customize-the-plot",
    "title": "3  umap",
    "section": "3.1 Of course, it is possible to customize the plot",
    "text": "3.1 Of course, it is possible to customize the plot\n\nplot + scale_color_hue()",
    "crumbs": [
      "Dimensional Reduction",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>umap</span>"
    ]
  },
  {
    "objectID": "examples/dimensional/01_umap.html#you-can-also-use-a-gene-a-key.",
    "href": "examples/dimensional/01_umap.html#you-can-also-use-a-gene-a-key.",
    "title": "3  umap",
    "section": "3.2 You can also use a gene a key.",
    "text": "3.2 You can also use a gene a key.\n\ncl.umap(data, \"NEAT1\", color_high=\"#D2042D\", add_tooltips=[\"leiden\", \"sample\"])",
    "crumbs": [
      "Dimensional Reduction",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>umap</span>"
    ]
  },
  {
    "objectID": "examples/dimensional/01_umap.html#it-is-possible-to-use-legends-on-the-data",
    "href": "examples/dimensional/01_umap.html#it-is-possible-to-use-legends-on-the-data",
    "title": "3  umap",
    "section": "3.3 It is possible to use legends on the data",
    "text": "3.3 It is possible to use legends on the data\nNote that this is only applicable to categorical data.\n\ncl.umap(\n    data,\n    key=\"leiden\",\n    size=0.8,\n    legend_ondata=True,\n    ondata_size=15,\n    ondata_fontface=\"plain\",\n)\n\n   \n   \n\n\n\ncl.versions()\n\ncellestial: 0.6.0\nscanpy: 1.10.4\nanndata: 0.11.3\npolars: 1.12.0",
    "crumbs": [
      "Dimensional Reduction",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>umap</span>"
    ]
  },
  {
    "objectID": "examples/dimensional/01_umaps.html",
    "href": "examples/dimensional/01_umaps.html",
    "title": "4  umaps",
    "section": "",
    "text": "4.1 umaps is a multi-grid plot function and accepts multiple keys list or any iterable.\numap_grid = (\n    cl.umaps(\n        data,\n        keys=[\"leiden\", \"HBD\", \"NEAT1\", \"IGKC\"],\n        ncol=2,\n        size=0.8,\n        color_high=\"#D2042D\",  # works with hex codes, rgb codes, and names (red, blue, etc.)\n    )\n    + ggsize(900, 700)\n)\numap_grid\ncl.versions()\n\ncellestial: 0.2.0\nscanpy: 1.10.4\nanndata: 0.11.0\npolars: 1.12.0",
    "crumbs": [
      "Dimensional Reduction",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>umaps</span>"
    ]
  },
  {
    "objectID": "examples/dimensional/02_tsne.html",
    "href": "examples/dimensional/02_tsne.html",
    "title": "5  tsne",
    "section": "",
    "text": "5.0.1 A simple tSNE plot\nplot = cl.tsne(data, key=\"leiden\", axis_type=\"arrow\", size=0.6, interactive=True)\nplot",
    "crumbs": [
      "Dimensional Reduction",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>tsne</span>"
    ]
  },
  {
    "objectID": "examples/dimensional/02_tsne.html#of-course-it-is-possible-to-customize-the-plot",
    "href": "examples/dimensional/02_tsne.html#of-course-it-is-possible-to-customize-the-plot",
    "title": "5  tsne",
    "section": "5.1 Of course, it is possible to customize the plot",
    "text": "5.1 Of course, it is possible to customize the plot\n\nplot + scale_color_hue()",
    "crumbs": [
      "Dimensional Reduction",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>tsne</span>"
    ]
  },
  {
    "objectID": "examples/dimensional/02_tsne.html#you-can-also-use-a-gene-a-key.",
    "href": "examples/dimensional/02_tsne.html#you-can-also-use-a-gene-a-key.",
    "title": "5  tsne",
    "section": "5.2 You can also use a gene a key.",
    "text": "5.2 You can also use a gene a key.\n\ncl.tsne(data, \"NEAT1\", color_high=\"#D2042D\")\n\n   \n   \n\n\n\ncl.versions()\n\ncellestial: 0.6.0\nscanpy: 1.10.4\nanndata: 0.11.3\npolars: 1.12.0",
    "crumbs": [
      "Dimensional Reduction",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>tsne</span>"
    ]
  },
  {
    "objectID": "examples/dimensional/02_tsnes.html",
    "href": "examples/dimensional/02_tsnes.html",
    "title": "6  tsnes",
    "section": "",
    "text": "6.1 tsnes is a multi-grid plot function and accepts multiple keys list or any iterable.\ntsne_grid = (\n    cl.tsnes(\n        data,\n        keys=[\"leiden\", \"HBD\", \"NEAT1\", \"IGKC\"],\n        ncol=2,\n        size=0.8,\n        color_high=\"#D2042D\",  # works with hex codes, rgb codes, and names (red, blue, etc.)\n    )\n    + ggsize(900, 700)\n)\ntsne_grid\ncl.versions()\n\ncellestial: 0.2.0\nscanpy: 1.10.4\nanndata: 0.11.0\npolars: 1.12.0",
    "crumbs": [
      "Dimensional Reduction",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>tsnes</span>"
    ]
  },
  {
    "objectID": "examples/dimensional/03_pca.html",
    "href": "examples/dimensional/03_pca.html",
    "title": "7  pca",
    "section": "",
    "text": "7.0.1 A simple PCA plot\nplot = cl.pca(data, key=\"leiden\", axis_type=\"arrow\", size=0.6, interactive=True)\nplot",
    "crumbs": [
      "Dimensional Reduction",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>pca</span>"
    ]
  },
  {
    "objectID": "examples/dimensional/03_pca.html#of-course-it-is-possible-to-customize-the-plot",
    "href": "examples/dimensional/03_pca.html#of-course-it-is-possible-to-customize-the-plot",
    "title": "7  pca",
    "section": "7.1 Of course, it is possible to customize the plot",
    "text": "7.1 Of course, it is possible to customize the plot\n\nplot + scale_color_hue()",
    "crumbs": [
      "Dimensional Reduction",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>pca</span>"
    ]
  },
  {
    "objectID": "examples/dimensional/03_pca.html#you-can-also-use-a-gene-a-key.",
    "href": "examples/dimensional/03_pca.html#you-can-also-use-a-gene-a-key.",
    "title": "7  pca",
    "section": "7.2 You can also use a gene a key.",
    "text": "7.2 You can also use a gene a key.\n\ncl.pca(data, \"NEAT1\", color_high=\"#D2042D\")\n\n   \n   \n\n\n\ncl.versions()\n\ncellestial: 0.6.0\nscanpy: 1.10.4\nanndata: 0.11.3\npolars: 1.12.0",
    "crumbs": [
      "Dimensional Reduction",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>pca</span>"
    ]
  },
  {
    "objectID": "examples/dimensional/03_pcas.html",
    "href": "examples/dimensional/03_pcas.html",
    "title": "8  pcas",
    "section": "",
    "text": "8.1 pcas is a multi-grid plot function and accepts multiple keys list or any iterable.\numap_grid = (\n    cl.pcas(\n        data,\n        keys=[\"leiden\", \"HBD\", \"NEAT1\", \"IGKC\"],\n        ncol=2,\n        size=0.8,\n        color_high=\"#D2042D\",  # works with hex codes, rgb codes, and names (red, blue, etc.)\n    )\n    + ggsize(900, 700)\n)\numap_grid\ncl.versions()\n\ncellestial: 0.2.0\nscanpy: 1.10.4\nanndata: 0.11.0\npolars: 1.12.0",
    "crumbs": [
      "Dimensional Reduction",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>pcas</span>"
    ]
  },
  {
    "objectID": "examples/distribution/01_violin.html",
    "href": "examples/distribution/01_violin.html",
    "title": "9  violin",
    "section": "",
    "text": "9.1 A simple Violin Plot\ncl.violin(\n    data,\n    \"pct_counts_in_top_50_genes\",\n    fill=\"sample\",\n    boxplot_color=\"#3f3f3f\",\n    show_points=True,\n    outlier_shape=1,\n)",
    "crumbs": [
      "Distribution",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>violin</span>"
    ]
  },
  {
    "objectID": "examples/distribution/01_violin.html#fill-splits-the-data-as-in-ggplot2",
    "href": "examples/distribution/01_violin.html#fill-splits-the-data-as-in-ggplot2",
    "title": "9  violin",
    "section": "9.2 Fill splits the data as in ggplot2",
    "text": "9.2 Fill splits the data as in ggplot2\n\nplot = cl.violin(\n    data,\n    \"pct_counts_in_top_50_genes\",\n    fill=\"leiden\",\n    show_points=True,\n    scale=\"width\",\n) + ggsize(1000, 400)\n\nplot",
    "crumbs": [
      "Distribution",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>violin</span>"
    ]
  },
  {
    "objectID": "examples/distribution/01_violin.html#customize-the-plot",
    "href": "examples/distribution/01_violin.html#customize-the-plot",
    "title": "9  violin",
    "section": "9.3 Customize the plot",
    "text": "9.3 Customize the plot\n\nplot += scale_fill_brewer(palette=\"Set2\") + scale_y_log2()\nplot",
    "crumbs": [
      "Distribution",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>violin</span>"
    ]
  },
  {
    "objectID": "examples/distribution/01_violin.html#turn-it-into-a-interactive-plot",
    "href": "examples/distribution/01_violin.html#turn-it-into-a-interactive-plot",
    "title": "9  violin",
    "section": "9.4 Turn it into a interactive plot",
    "text": "9.4 Turn it into a interactive plot\nEven if you did not create the plot with interactive = True you can still make it interactive with +ggtb() by lets_plot.\n\nplot += ggtb()\nplot\n\n   \n   \n\n\n\ncl.versions()\n\ncellestial: 0.6.0\nscanpy: 1.10.4\nanndata: 0.11.3\npolars: 1.12.0",
    "crumbs": [
      "Distribution",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>violin</span>"
    ]
  },
  {
    "objectID": "examples/distribution/01_violins.html",
    "href": "examples/distribution/01_violins.html",
    "title": "10  violins",
    "section": "",
    "text": "10.1 Instead of a single key, violins expects a list (iterable) of keys.",
    "crumbs": [
      "Distribution",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>violins</span>"
    ]
  },
  {
    "objectID": "examples/distribution/01_violins.html#instead-of-a-single-key-violins-expects-a-list-iterable-of-keys.",
    "href": "examples/distribution/01_violins.html#instead-of-a-single-key-violins-expects-a-list-iterable-of-keys.",
    "title": "10  violins",
    "section": "",
    "text": "10.1.1 it will split the plot into ncol columns\n\ncl.violins(\n    data,\n    [\n        \"n_genes_by_counts\",\n        \"pct_counts_in_top_100_genes\",\n        \"log1p_total_counts_mt\",\n        \"pct_counts_hb\",\n    ],\n    ncol=2,\n    fill=\"sample\",\n    show_points=False,\n    layers=[scale_y_log10()],\n)",
    "crumbs": [
      "Distribution",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>violins</span>"
    ]
  },
  {
    "objectID": "examples/distribution/01_violins.html#merge-multiple-plots-into-a-single-plot",
    "href": "examples/distribution/01_violins.html#merge-multiple-plots-into-a-single-plot",
    "title": "10  violins",
    "section": "10.2 Merge multiple plots into a single plot",
    "text": "10.2 Merge multiple plots into a single plot\nYou can simply set multi_panel=False to merge multiple plots into a single plot.\nIt is not suggested to use this option if the plots have extremely different scales.\n\ncl.violins(\n    data,\n    [\n        \"n_genes_by_counts\",\n        \"pct_counts_in_top_100_genes\",\n        \"log1p_total_counts_mt\",\n        \"pct_counts_hb\",\n    ],\n    ncol=2,\n    fill='sample',\n    show_points=False,\n    add_tooltips=[\"leiden\"],\n    layers=[scale_y_log10()],\n    multi_panel=False,\n    scale=\"width\",\n)+ggsize(800,600)\n\n   \n   \n\n\n\ncl.versions()\n\ncellestial: 0.6.0\nscanpy: 1.10.4\nanndata: 0.11.3\npolars: 1.12.0",
    "crumbs": [
      "Distribution",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>violins</span>"
    ]
  },
  {
    "objectID": "examples/distribution/02_boxplot.html",
    "href": "examples/distribution/02_boxplot.html",
    "title": "11  boxplot",
    "section": "",
    "text": "11.1 A simple boxplot\ncl.boxplot(\n    data,\n    \"pct_counts_in_top_50_genes\",\n    fill=\"sample\",\n    boxplot_color=\"#3f3f3f\",\n    show_points=True,\n    outlier_shape=1,\n)",
    "crumbs": [
      "Distribution",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>boxplot</span>"
    ]
  },
  {
    "objectID": "examples/distribution/02_boxplot.html#fill-splits-the-data-as-in-ggplot2",
    "href": "examples/distribution/02_boxplot.html#fill-splits-the-data-as-in-ggplot2",
    "title": "11  boxplot",
    "section": "11.2 Fill splits the data as in ggplot2",
    "text": "11.2 Fill splits the data as in ggplot2\n\nplot = cl.boxplot(\n    data,\n    \"pct_counts_in_top_50_genes\",\n    fill=\"leiden\",\n    boxplot_color=\"#3f3f3f\",\n    show_points=True,\n    outlier_shape=1,\n) + ggsize(1000, 400)\n\nplot",
    "crumbs": [
      "Distribution",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>boxplot</span>"
    ]
  },
  {
    "objectID": "examples/distribution/02_boxplot.html#customize-the-plot",
    "href": "examples/distribution/02_boxplot.html#customize-the-plot",
    "title": "11  boxplot",
    "section": "11.3 Customize the plot",
    "text": "11.3 Customize the plot\n\nplot += scale_fill_brewer(palette=\"Set2\") + scale_y_log2()\nplot",
    "crumbs": [
      "Distribution",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>boxplot</span>"
    ]
  },
  {
    "objectID": "examples/distribution/02_boxplot.html#turn-it-into-a-interactive-plot",
    "href": "examples/distribution/02_boxplot.html#turn-it-into-a-interactive-plot",
    "title": "11  boxplot",
    "section": "11.4 Turn it into a interactive plot",
    "text": "11.4 Turn it into a interactive plot\nEven if you did not create the plot with interactive = True you can still make it interactive with +ggtb() by lets_plot.\n\nplot += ggtb()\nplot\n\n   \n   \n\n\n\ncl.versions()\n\ncellestial: 0.2.0\nscanpy: 1.10.4\nanndata: 0.11.0\npolars: 1.12.0",
    "crumbs": [
      "Distribution",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>boxplot</span>"
    ]
  },
  {
    "objectID": "examples/distribution/02_boxplots.html",
    "href": "examples/distribution/02_boxplots.html",
    "title": "12  boxplots",
    "section": "",
    "text": "12.1 Instead of a single key, boxplots expects a list (iterable) of keys.",
    "crumbs": [
      "Distribution",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>boxplots</span>"
    ]
  },
  {
    "objectID": "examples/distribution/02_boxplots.html#instead-of-a-single-key-boxplots-expects-a-list-iterable-of-keys.",
    "href": "examples/distribution/02_boxplots.html#instead-of-a-single-key-boxplots-expects-a-list-iterable-of-keys.",
    "title": "12  boxplots",
    "section": "",
    "text": "12.1.1 it will split the plot into ncol columns\n\ncl.boxplots(\n    data,\n    [\n        \"n_genes_by_counts\",\n        \"pct_counts_in_top_100_genes\",\n        \"log1p_total_counts_mt\",\n        \"pct_counts_hb\",\n    ],\n    ncol=2,\n    fill=\"sample\",\n    show_points=False,\n    layers=[scale_y_log10()],\n)",
    "crumbs": [
      "Distribution",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>boxplots</span>"
    ]
  },
  {
    "objectID": "examples/distribution/02_boxplots.html#merge-multiple-plots-into-a-single-plot",
    "href": "examples/distribution/02_boxplots.html#merge-multiple-plots-into-a-single-plot",
    "title": "12  boxplots",
    "section": "12.2 Merge multiple plots into a single plot",
    "text": "12.2 Merge multiple plots into a single plot\nYou can simply set multi_panel=False to merge multiple plots into a single plot.\nIt is not suggested to use this option if the plots have extremely different scales.\n\ncl.boxplots(\n    data,\n    [\n        \"n_genes_by_counts\",\n        \"pct_counts_in_top_100_genes\",\n        \"log1p_total_counts_mt\",\n        \"pct_counts_hb\",\n    ],\n    ncol=2,\n    fill='sample',\n    show_points=False,\n    add_tooltips=[\"leiden\"],\n    layers=[scale_y_log10()],\n    multi_panel=False,\n    scale=\"width\",\n)+ggsize(800,600)\n\n   \n   \n\n\n\ncl.versions()\n\ncellestial: 0.6.0\nscanpy: 1.10.4\nanndata: 0.11.3\npolars: 1.12.0",
    "crumbs": [
      "Distribution",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>boxplots</span>"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Cellestial",
    "section": "",
    "text": "Preface\nCellestial is a single-cell and spatial biology data visualization library. It produces publication-quality figures through a ggplot2-like API of Lets-Plot and provides extensive customization options and creates interactive figures for exploration.\nInstall Cellestial with:\npip install cellestial",
    "crumbs": [
      "Preface"
    ]
  }
]